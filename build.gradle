import java.nio.charset.StandardCharsets

plugins {
  id "java"
  id "org.sonarqube" version "2.8"
  id 'jacoco'
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'jacoco'

  group = "org.openapi4j"
  version = "0.4" + (Boolean.valueOf(System.getProperty("release")) ? "" : "-SNAPSHOT")

  java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
  }
  compileJava.options.encoding = StandardCharsets.UTF_8.toString()

  tasks.withType(JavaCompile) {
    options.encoding = StandardCharsets.UTF_8.toString()
  }

  repositories {
    mavenCentral()
    mavenLocal()
  }

  /*tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
  }*/

  /*sonarqube {
    properties {
      property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
  }*/

  /*jacocoTestReport {
    reports {
      xml.enabled = true
    }
  }*/

  jar {
    manifest {
      attributes 'Build-date': new Date()
      attributes 'Implementation-Title': project.name
      attributes 'Implementation-Version': project.version
    }
  }
}

task codeCoverageReport(type: JacocoReport) {
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  subprojects.each {
    sourceSets it.sourceSets.main
  }

  reports {
    xml.enabled true
    html.enabled true
    csv.enabled false
  }
}

codeCoverageReport.dependsOn {
  subprojects*.test
}

sonarqube {
  properties {
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
  }
}
